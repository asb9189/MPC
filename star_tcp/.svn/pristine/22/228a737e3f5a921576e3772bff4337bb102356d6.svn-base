from node import Node
import json
import time
import sys

class ClientNode(Node):
    def __init__(self, host, port):
        super().__init__(False, host, port)
        self.r1_sum = 0
        self.r2_sum = 0
        self.r3_sum = 0

    def receive(self, msg):
        
        if msg['round'] == 0:
            self.node_id = msg['message']
            self.num_parties = msg['num_parties']
            self.round_num += 1
        elif msg['round'] == 1 and self.round_num == 1:
            print(f"party {self.port} got {msg}")
            vals = msg['message'].split('\n')
            for num in vals[:-1]:
                self.r1_sum += int(num)
                self.recv_count += 1
                if self.recv_count == self.num_parties - 1:
                    self.round_num += 1
                    self.recv_count = 0
        elif msg['round'] == 2 and self.round_num == 2:
            vals = msg['message'].split('\n')
            for num in vals[:-1]:
                self.r2_sum += int(num)
                self.recv_count += 1
                if self.recv_count == self.num_parties - 1:
                    self.round_num += 1
                    self.recv_count = 0
        elif msg['round'] == 3 and self.round_num == 3:
            vals = msg['message'].split('\n')
            for num in vals[:-1]:
                self.r3_sum += int(num)
                self.recv_count += 1
                if self.recv_count == self.num_parties - 1:
                    self.round_num += 1
                    self.recv_count = 0

NUM_PARTIES = 5
party_list = [ClientNode('127.0.0.1', 8766 + i) for i in range(NUM_PARTIES)]


round1_shares = [1, 2, 3, 4, 5] #how do we send these messages to each person encrypted?

start = time.time()
try:
    # connect to the server
    for p in party_list:
        p.connect_to_node(('127.0.0.1', 8700))

    # round 0 getting id numbers
    for p in party_list:
        p.send_message({'round' : 0}, addr = ('127.0.0.1', 8700))
    for p in party_list:
        p.receive(json.loads(p.sock.recv(65507).decode('utf-8')))

    for p in party_list:
        print(f"party {p.port} sent {round1_shares}")
        p.send_message({'round' : 1, 'message' : round1_shares}, addr = ('127.0.0.1', 8700))
    for p in party_list:
        p.receive(json.loads(p.sock.recv(65507).decode('utf-8')))

    for p in party_list:
        p.send_message({'round' : 2, 'message': round1_shares}, addr = ('127.0.0.1', 8700))
    for p in party_list:
        p.receive(json.loads(p.sock.recv(65507).decode('utf-8')))

    #for p in party_list:
        #p.send_message({'round' : 3, 'message' : round3_shares}, addr = ('127.0.0.1', 8700))
    #for p in party_list:
        #p.receive(json.loads(p.sock.recv(65507).decode('utf-8')))

# Wait until everyone is done
    while True:
        time.sleep(1)
        done = True
        num_done = 0
        for p in party_list:
            if p.round_num < 2:
                done = False
            else:
                num_done += 1
                print(f'r1 sum : {p.r1_sum}')
        print('parties finished:', num_done)
        if done:
            print(f'it took {time.time() - start} seconds for {NUM_PARTIES} parties.')
            sys.exit()
except Exception:
    print(f'There was an error after {time.time() - start} seconds.')
    raise Exception

